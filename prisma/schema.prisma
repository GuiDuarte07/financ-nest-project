datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())

  email          String   @unique
  emailConfirmed Boolean? @default(false)

  password String

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories                   Category[]
  accounts                     Account[]
  creditCards                  CreditCard[]
  expenses                     Expense[]
  creditCardExpenses           CreditCardExpense[]
  Income                       Income[]
  CreditCardExpenseGenerator   CreditCardExpenseGenerator[]
  CreditCardRecorrencePurchase CreditCardRecorrencePurchase[]
}

model Account {
  id             String  @id @default(uuid())
  balance        Float
  initialBalance Float
  description    String
  bank           String
  color          String?
  type           String //AccountTypes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creditCards CreditCard[]

  user     User      @relation(fields: [userId], references: [id])
  userId   String
  expenses Expense[]
  Income   Income[]
}

model CreditCard {
  id          String  @id @default(uuid())
  limit       Int
  description String
  cardBrand   String
  account     Account @relation(fields: [accountId], references: [id])
  accountId   String

  type String //CreditTypes

  closeDay      Int //Dia de fechamento da fatura
  expirationDay Int // Dia de vencimento da fatura

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  creditCardExpenses           CreditCardExpense[]
  CreditCardExpenseGenerator   CreditCardExpenseGenerator[]
  CreditCardRecorrencePurchase CreditCardRecorrencePurchase[]
}

model Category {
  id String @id @default(uuid())

  name  String
  icon  String?
  color String?
  type  String //ExpeInco

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                         User                           @relation(fields: [userId], references: [id])
  userId                       String
  Expense                      Expense[]
  Income                       Income[]
  CreditCardRecorrencePurchase CreditCardRecorrencePurchase[]
  RecorrenceBillsProcess       RecorrenceBillsProcess[]
}

model Expense {
  id            String                  @id @default(uuid())
  description   String
  value         Float
  purchaseDate  DateTime                @default(now())
  justForRecord Boolean                 @default(false) //Apenas para registro
  recorrence    RecorrenceBillsProcess? @relation(fields: [recorrenceId], references: [id])
  recorrenceId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

model CreditCardExpenseGenerator {
  id                   String   @id @default(uuid())
  name                 String
  justForRecord        Boolean  @default(false) //Apenas para registro
  totalValue           Float
  earlyPaymentDiscount Float    @default(0)
  installment          Int //Quantidade de parcelas
  purchaseDate         DateTime @default(now()) //Data da compra
  invoiceDate          DateTime @default(now()) //Data de inicio do pagamento da fatura
  paymentEndDate       DateTime //Data do fim da fatura
  resolved             Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creditCard   CreditCard @relation(fields: [creditCardId], references: [id])
  creditCardId String

  user              User                @relation(fields: [userId], references: [id])
  userId            String
  CreditCardExpense CreditCardExpense[]
}

model CreditCardExpense {
  id                     String   @id @default(uuid())
  name                   String
  justForRecord          Boolean  @default(false) //Apenas para registro
  value                  Float
  paidOut                Boolean  @default(false)
  anticipated            Boolean  @default(false)
  invoiceDate            DateTime @default(now()) //Data de inicio do pagamento da fatura
  installmentNumber      Int
  totalInstallmentNumber Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creditCardExpenseGenerator   CreditCardExpenseGenerator @relation(fields: [creditCardExpenseGeneratorId], references: [id])
  creditCardExpenseGeneratorId String

  CreditCard   CreditCard? @relation(fields: [creditCardId], references: [id])
  creditCardId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Income {
  id            String   @id @default(uuid())
  value         Float
  receivedAt    DateTime @default(now()) // Data em que o valor foi recebido
  description   String? // Nome ou descrição para a entrada
  justForRecord Boolean  @default(false) //Apenas para registro

  recorrence   RecorrenceBillsProcess? @relation(fields: [recorrenceId], references: [id])
  recorrenceId String?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String
  account    Account   @relation(fields: [accountId], references: [id])
  accountId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Essa tabela irá rodar em um schedule para gerar novas despesas de cartões não pagas
model CreditCardRecorrencePurchase {
  id            String  @id @default(uuid())
  name          String
  dayOfPayment  Int
  value         Float
  justForRecord Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  CreditCard   CreditCard? @relation(fields: [creditCardId], references: [id])
  creditCardId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Essa tabela irá rodar em um schedule para gerar novos incomes/expense
model RecorrenceBillsProcess {
  id                   String  @id @default(uuid())
  value                Float
  justForRecord        Boolean @default(false)
  stopCount            Boolean @default(false)
  paymentRecurrence    String //Recurrence  Recorrência do pagamento
  monthlyDayOfPayment  Int? // Se for mensal Dia do pagamento (se aplicável)
  weeklyDay            String? //Dia da semana, caso for semanal
  countNumber          Int     @default(0)
  rememberDayOfPayment Boolean // Se deve lembrar o dia do pagamento (se aplicável)
  type                 String //ExpeInco

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String

  Expense Expense[]
  Income  Income[]
}

// enum Recurrence {
//   daily
//   weekly
//   monthly
// }

// enum CreditTypes {
//   debit
//   credit
// }

// enum ExpeInco {
//   expense
//   income
// }

// enum AccountTypes {
//   current
//   cash
//   savings
// }

// enum PaymentMethod {
//   cash
//   creditCard
// }
